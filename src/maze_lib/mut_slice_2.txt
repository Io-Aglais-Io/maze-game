/// [`MazeSliceMut`] is a newtype wrapper around [`ArrayViewMut2`]. This is done for 2 reasons:
///
/// * It allows me to implement my own methods not in [`ArrayViewMut2`]
/// * It lets me not type [`u8`] as the type over and over again
#[derive(Debug)]
pub struct MazeSliceMut<'slice>(ArrayViewMut2<'slice, u8>);

/// Creates a [`MazeSliceMut`] containing a view of 2 of the dimensions
    ///
    /// **Panics** if `pos` is greater than the size of the maze
    pub fn view_2_axis_mut(&mut self, axis3: MazeAxis3, pos: usize) -> MazeSliceMut {
        assert!(pos <= MAZE_SIZE);

        MazeSliceMut(self.0.subview_mut(axis3.create_axis(), pos))
    }

#[test]
    fn test_make_slice_mut() {
        let mut mz = Maze::new_prefilled();
        let mz_view = mz.view_2_axis_mut(MazeAxis3::X, 1);

        for (mz_num, num) in mz_view.0.iter().zip(MAZE_SIZE_2..=MAZE_SIZE_2 * 2) {
            assert_eq!(*mz_num, num as u8);
        }
    }

//! | 1.3         | `Maze`: Test that `view_2_axis_mut` correctly returns a mutable view to only 2 axes of the array        | Prefilled Maze, X axis and the 2nd pos           | Correct part of `Maze` is returned as a `MazeSliceMut`    | `test_make_slice_mut`       |
